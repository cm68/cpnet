	title	'ESP AT'

;/*
;  Copyright (C) 1980, 1981, 1982
;  Digital Research
;  P.O. Box 579
;  Pacific Grove, CA 93950
;
;  Revised:  October 5, 1982
;*/

;
; this code is for an espressif running the AT command set.  we
; are using the serial I/O nic code to talk to the AT pipeline
; this is greatly simplified from the DRI-serial code, since
; the ESP is running TCP/IP, and we can assume reliable transport
; thus, there is no need to count retries.  if the link is dead,
; it's dead.
;
; Feb 14, 2022
; assemble with SLRZ80, SLR180 or M80
;
; we try really hard to avoid buffer copies, so the underlying
; code will do scatter write and gather read.  this would be 2
; extra copies on top of what the NDOS is already doing.  what
; the NDOS should be doing is sending us an IO vector where
; to get/put the header and where to get/put the actual data payload
;
	include	mk4.lib

	public	ntwkin,ntwkst
	public	CNFTBL,SNDMSG,RCVMSG,NTWKER,NTWKBT,NTWKDN,CFGTBL

	public	retbuf
	public	cmdbuf

	extrn	espreset
	extrn	sreset
	extrn	wrtread
	extrn	atcmd
	extrn	atcmdl
	extrn	ismatch
	extrn	itoa
	extrn	atoi
	extrn	delay
	extrn	retbuf
	extrn	strcpy

	extrn	debugf
	extrn	dprint
	extrn	hexdump
	extrn	hex2
	extrn	hex4
	extrn	cr1
	extrn	newline

; DEBUG	equ	1

	cseg

; Initial Slave Configuration Table - must be first in module
cfgtbl:
networkstatus:

	defb	0		; network status byte
	defb	0FFh		; slave processor ID number
	defw	0		; A:  Disk device
	defw	0		; B:   "
	defw	0		; C:   "
	defw	0		; D:   "
	defw	0		; E:   "
	defw	0		; F:   "
	defw	0		; G:   "
	defw	0		; H:   "
	defw	0		; I:   "
	defw	0		; J:   "
	defw	0		; K:   "
	defw	0		; L:   "
	defw	0		; M:   "
	defw	0		; N:   "
	defw	0		; O:   "
	defw	0		; P:   "

	defw	0		; console device

	defw	0		; list device:
	defb	0		;	buffer index
	defb	0		;	FMT
	defb	0		;	DID
	defb	0FFh		;	SID (CP/NOS must still initialize)
	defb	5		;	FNC
	defb	0		;	SIZ
	defb	0		;	MSG(0)  List number
msgbuf:				; temp message, do not disturb LST: header
	defs	128		;	MSG(1) ... MSG(128)

msgadr:
	defs	2		; message address

;
; Network Status Byte Equates
;
active	equ	00010000b	; slave logged in on network
rcverr	equ	00000010b	; error in received message
senderr	equ	00000001b	; unable to send message

;
; NDos calls this to initialize the transport
; Network Initialization
;
ntwkin:
ifdef	DEBUG
	ld	a,0
	ld	(debugf),a
endif
	call	sreset
	jp	c,initerr

	ld	a,2
	call	espreset	; reset the esp with connect
	jp	c,initerr

	ld	a,1		; we have a fixed slave ID
	ld	(msgbuf+1),a
	ld	(cfgtbl+1),a

	ld	a,active
	ld	(cfgtbl+0),a

	xor	a		; clean return
	ret

initerr:
	ld	a,0FFh
	or	a
	ret
;
; Network Status
; basically return the networkstatus byte, clearing any
; recv and send error bits as a side effect
;
ntwkst:
	ld	a,(networkstatus)
	ld	b,a
	and	not (rcverr+senderr)
	ld	(networkstatus),a
	ld	a,b
	ret
;
; Return Configuration Table Address
;
cnftbl:
	ld	hl,cfgtbl
	ret

;
; Send Message on Network
; address of message is in BC.  
; the size is encoded in BC+4
; return with A == 0ffh if error, else 0 if ok
;
; note that this interface is inherently inefficent, since
; it requires the caller to set up a single contiguous message
; containing the 5 byte frame prepended to the payload
;
; in the underlying transport, we don't want to copy it again,
; so we use a gather write primitive to send our payload
; (which is really the NDOS header plus the real payload)
;
atput:	db	'AT+CIPSEND=',0		; send fixed data length
atputr:	db	CR,LF,'OK',CR,LF,CR,LF,'>',0
crlf:	db	CR,LF,0
sbad:	db	'ERROR',CR,LF,0

wma:	dw	0
wlen:	dw	0
clen:	db	0

sndmsg:
	di
sndmsg0:
	ld	(wma),bc	; save header + payload address
	inc	bc
	inc	bc
	ld	a,(cfgtbl+1)
	ld	(bc),a 		; place SID into header
	inc	bc
	inc	bc
	ld	a,(bc)		; get length
	add	a,6		; 5 for header, plus 0 means 1.
	ld	(wlen),a

ifdef	DEBUG
	ld	a,'>'
	call	cr1
	ld	hl,(wma)
	ld	bc,(wlen)
	call	hexdump
endif

	ld	hl,atput	; build command
	ld	de,cmdbuf
	call	strcpy

	ld	hl,(wlen)	; get payload length
	call	itoa
	add	a,11+2		; command plus cr,lf
	ld	(clen),a
	ld	hl,crlf
	call	strcpy

	ld	hl,cmdbuf
	ld	de,9
	call	atcmd
	jr	c,slose

	ld	de,retbuf	; we need: 'cr lf OK cr lf cr lf >'
	ld	hl,atputr
	call	ismatch
	jr	nz,slose

	ld	bc,(wlen)	; send header+payload
	ld	de,7		; we can expect 'ERRORcrlf'
	ld	hl,(wma)	; payload address
	call	atcmdl
	jr	c,slose
	
	ld	de,retbuf	; check if we failed
	ld	hl,sbad
	call	ismatch
	jr	z,slose

	xor	a
sret:
	ei
	ret

slose:	
	ld	a,0ffh
	ei
	ret

;
; Receive Message from Network
;
; we really just poll until we can read our response.
; and then we do so.
; again, we do a scatter read to split the payload from our framing
; that is necessitated by the AT command
; we are called with BC pointing at the NDOS header plus expected
; payload.
;
; NB: there seem to be short reads happening, which don't comport
; with what we need. I will avoid this by issuing 2 requests:
; one for exactly the header of 5 bytes, and once I get that,
; one for exactly the read length I expect.  this means no timeouts
; or short reads
;
; AT literal command fragments and expected responses
; responses are null-terminated
;
atghdr:	db	'AT+CIPRECVDATA=5',CR,LF,0
; response will be exactly 25 bytes
; +CIPRECVDATA:5,<FMT><DID><SID><FNC><SIZ>CRLFOKCRLF

atget:	db	'AT+CIPRECVDATA=',0

orma:	dw	0
rma:	dw	0		; recv buffer address

doff:	db	0		; offset into recv buffer of payload

avail:	dw	0		; set as side-effect of waitav
rlen:	dw	0		; length of payload

rlose:	
	ld	a,0ffh
	ei
	ret

rcvmsg:	
	di
	ld	(rma),bc	; save pointers
	ld	(orma),bc

	ld	hl,5
	call	waitav
	ld	a,'0'
	jr	c,rlose

rhdr:	ld	hl,atghdr	; get the 5 byte header
	ld	de,25
	call	atcmd
	ld	a,'1'
	jr	c,rlose

	ld	hl,(retbuf+19)	; how much payload is needed?
	ld	h,0
	inc	hl
	ld	(rlen),hl	

	ld	hl,retbuf+15	; copy out the header
	ld	de,(rma)
	ld	bc,5
	ldir
	ld	(rma),de

ifdef	DEBUG
	ld	a,'<'		; dump out the header
	call	cr1
	ld	hl,(orma)
	ld	c,5
	call	hexdump
endif

	;
	; if it isn't already known to be there from the previous call,
	; wait for payload to be available
	;

	ld	hl,(avail)	; subtract the amount we read
	ld	de,5
	or	a
	sbc	hl,de		; hl is now the available data

	ld	de,(rlen)	; subtract the amount we want
	or	a
	sbc	hl,de		
	jr	z,rdata		; just right, go
	jr	nc,rdata	; more than enough, go

	ex	de,hl
	call	waitav
ifdef	DEBUG
	ld	a,'2'
endif
	jr	c,rlose

rdata:	ld	hl,atget	; build recv command
	ld	de,cmdbuf
	call	strcpy
	ld	hl,(rlen)
	call	itoa
	add	13+1		; '+CIPRECVDATA:' and ','	
	ld	(doff),a
	ld	hl,crlf
	call	strcpy

	; response will be exactly:
	; +CIPRECVDATA:<len>,<data>CRLFOKCRLF
	;
	ld	de,(rlen)
	ld	hl,(doff)
	ld	h,0
	add	hl,de		; and how much data expected
	ld	de,6		; tail: crlfOKcrlf
	ex	de,hl
	ld	hl,cmdbuf
	call	atcmd

ifdef	DEBUG
	ld	a,'3'
endif
	jp	c,rlose

	ld	hl,retbuf	; point at the payload
	ld	de,(doff)
	ld	d,0
	add	hl,de
	ld	bc,(rlen)
	ld	de,(rma)
	ldir			; copy it out

ifdef	DEBUG
	ld	a,'<'
	call	cr1
	ld	hl,(orma)
	ld	a,(rlen)
	add	5
	ld	c,a
	call	hexdump
endif

	xor	a
	ei
	ret

;
; poll until the receiver has at least HL bytes available.
; this means sending a CIPREVLEN? and waiting for the answer to be
; at least what we want.  the size of the read we issue is 19,
; big enough for +CIPRECVLEN:0crlfOKcrlf, the minimum returned
; return the size readable in HL.  this could prevent extra polling
;
glen:	db	'AT+CIPRECVLEN?',CR,LF,0	; get socket readable length

need:	dw	0

waitav:
	ld	(need),hl

	ld	a,'?'
	call	dprint
	ld	hl,(need)
	call	hex4
	ld	a,'='
	call	dprint
	
	xor	a
	ld	(retbuf+11),a
	ld	(retbuf+12),a
waitl:
	ld	hl,glen		; how much do you got?
	ld	bc,16
	ld	de,19
	call	atcmdl
	ld	a,'0'
	jr	c,wlose

	;
	; due to the silly AT "passive" protocol having async notifications
	; if data movement, we might get silly +IPD messages or SEND OK
	; if so, then it won't look like the expected recv len response
	; just retry immediately in this case
	;
	ld	hl,retbuf+11	; +CIPRECVLEN:<int>,<int>...crlf
	ld	a,':'
	cp	(hl)
	jp	nz,waitl	; not what we expected

	;
	; got an answer, see if it's enough
	;
	inc	hl
	ex	de,hl
	call	atoi		; get length of available data
	ld	(avail),hl
	ld	de,(need)
	or	a
	sbc	hl,de
	jr	nc,wwin		; if more available
	jr	z,wwin		; if just enough

	ld	hl,0ff00h
pause1: dec	hl
	ld	a,h
	or	l
	jr	nz,pause1	

	jr	waitl
	ret
	
wlose:
ifdef	DEBUG
	push	af
	ld	a,'%'
	call	dprint
	pop	af
	call	dprint
	ld	hl,cmdbuf
	ld	c,040h
	call	hexdump
	ld	hl,retbuf
	ld	c,040h
	call	hexdump
endif
	scf			; no good answer
	ret

wwin:	xor	a
	ld	hl,(avail)
	call	hex4
	call	newline
	ret

ntwker:
ntwrkerror:

				;  perform any required device
	ret			;     re-initialization

;
ntwkbt:

;	This procedure is called each time the CCP is
;  	reloaded from disk.  This version prints "<WARM BOOT>"
;  	on the console and then returns, but anything necessary
;       for restart can be put here.

; 	mvi	c,print
;	lxi	d,wboot$msg
;	jmp	BDOS
	xor	a
	ret

ntwkdn:				; shutdown server - FNC=254 (no response)
	ld	ix,msgbuf
	ld	(ix+0),0	; FMT
	ld	(ix+3),0FEh	; BDOS Func
	ld	(ix+4),0	; Size
	ld	bc,msgbuf
	call	sndmsg0		; avoid active check
	xor	a
	ret

	db	'-snios end-',0

cmdbuf:	ds	256
retbuf:	ds	256

	end
