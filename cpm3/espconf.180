;
; configure the ESP-01 module
; this means to write the flash with
; network connection information
; the flash has to contain quotes for the names, but we
; make that completely transparent.

	include	mk4.lib

	extrn	itoa,atoi,strlen,cpdelim
	extrn	ismatch
	extrn	strcpy
	extrn	sreset
	extrn	wrtread
	extrn	espreset
	extrn	atcmd
	extrn	atcmdl
	extrn	hexdump
	extrn	hexdmps
	extrn	outstr
	extrn	hex2
	extrn	debugf

	public	retbuf
	public	cmdbuf

bdos	equ	0005h

	jp	start

signon:	db	'ESP Flash Config',0

resets:	db	'Serial Reset Failed',CR,LF,0
resete:	db	'ESP Reset Failed',CR,LF,0
eram:	db	'Flash erase Failed',CR,LF,0
wrm:	db	'Flash write Failed',CR,LF,0
rdcm:	db	'Config read Failed',CR,LF,0
mactm:	db	'Autoconn set Failed',CR,LF,0
mstm:	db	'Mode set Failed',CR,LF,0
msvm:	db	'Mode save Failed',CR,LF,0

debugm:	db	' debug = ',0
modem:	db	' mode = ',0
nomagic:db	'No stored configuration',CR,LF,0
currm:	db	'Current configuration: ',CR,LF,0
newm:	db	'New configuration: ',CR,LF,0
forcem:	db	'Forcing new configuration: ',CR,LF,0
editm:	db	CR,LF,'Edit configuration: ',CR,LF,0
donem:	db	'Function complete',CR,LF,0
nochg:	db	'No change',CR,LF,0
ssidm:	db	'ssid: ',0
passm:	db	'password: ',0
hostm:	db	'host: ',0
portm:	db	'port: ',0

magic:  db      'DEADC0DE',0
del1:	db	'","',0
sep:    db      ':',0

mact:	db	'AT+CWAUTOCONN=0',CR,LF,0
mset:	db	'AT+CWMODE=1,0',CR,LF,0
msave:	db	'AT+SYSSTORE=1',CR,LF,0
cfera:  db      'AT+SYSFLASH=0,"mqtt_cert"',CR,LF,0
cfwr:   db      'AT+SYSFLASH=1,"mqtt_cert",0,100',CR,LF,0
cfrd:   db      'AT+SYSFLASH=2,"mqtt_cert",0,100',CR,LF,0
dpr:    db      '>',0
crlf:   db      CR,LF,0
comma:  db      ',',0

ssid:   db      'ssid',0,'                ',0
pass:   db      'password',0,'            ',0
host:   db      'server',0,'              ',0
port:   db      'port',0,'                ',0

tbuf:	ds	256
cmdbuf:	ds	256
retbuf:	ds	256
conf:	ds	256

opt:	db	0

start:
	ld	hl,080h
	ld	b,(hl)
	inc	b
	jr	oloop
nxtopt: ld	a,(hl)
	cp	'0'
	jr	c,oloop
	cp	'Z'+1
	jr	nc,oloop
	cp	'A'
	jr	nc,mdset
	sub	'0'
	jr	c,oloop
	cp	9+1
	jr	nc,oloop
	ld	(debugf),a
	jr	oloop
mdset:	ld	(opt),a
oloop:	inc	hl
	djnz	nxtopt

nod:
	ld	de,signon
	call	outstr
	ld	a,(opt)
	or	a
	jr	z,der
	ld	de,modem
	call	outstr
	ld	a,(opt)
	call	putch
	
der:	ld	a,(debugf)
	or	a
	jr	z,stail
	ld	de,debugm
	call	outstr
	ld	a,(debugf)
	add	'0'
	call	putch

stail:	ld	de,crlf
	call	outstr

	call	sreset
	ld	de,resets
	jp	c,lose

	ld	a,0			; don't connect
	call	espreset
	ld	de,resete
	jp	c,lose

	ld	a,(opt)
	cp	'F'
	jr	nz,rcf

	ld	de,forcem
	jr	force

rcf:	ld	hl,cfrd			; read flash mqtt_cert
	ld	de,100+14+6
	call	atcmd
	ld	de,rdcm
	jp	c,lose

	ld	hl,retbuf+14		; save flash content
	ld	de,conf
	ld	bc,100
	ldir

	xor	a
	ld	(retbuf+14+100),a
	ld	(retbuf+14+8),a

	ld	hl,retbuf+14
	ld	de,magic
	call	ismatch
	jr	z,hazmagic

	ld	de,nomagic
	call	outstr

	jr	getconf

	;
	; parse the configuration into the
	;
hazmagic:
	ld      hl,retbuf+14+8+1
        ld      de,ssid         ; get ssid
        call    qdelim
        ld      de,pass         ; get passwd
        call    qdelim
        ld      de,host         ; get host
        call    qdelim
        ld      de,port         ; get port
        call    cpdelim

	ld	de,currm
	call	outstr
	call	dumpit

getconf:
	ld	de,editm
force:
	call	outstr

	ld	hl,ssidm
	ld	de,ssid
	call	prval

	ld	hl,passm
	ld	de,pass
	call	prval

	ld	hl,hostm
	ld	de,host
	call	prval

	ld	hl,portm
	ld	de,port
	call	prval

	ld	de,newm
	call	outstr
	call	dumpit

	ld	de,tbuf		; build config
	ld	hl,magic
	call	strcpy
	ld	a,':'
	call	apch
	ld	a,'"'
	call	apch
	ld	hl,ssid
	call	strcpy
	call	sep1
	ld	hl,pass
	call	strcpy
	call	sep1
	ld	hl,host
	call	strcpy
	ld	a,'"'
	call	apch
	ld	a,','
	call	apch
	ld	hl,port
	call	strcpy

	ld	hl,tbuf		; compare our configuration to
	ld	de,conf		; what we already have
	call	ismatch
	jr	nz,dowrite
	ld	de,nochg

	jp	win

dowrite:
	ld	hl,mact		; set autoconn off
	ld	de,6
	call	atcmd
	ld	de,mactm
	jp	c,lose

	ld	hl,mset		; set AP mode
	ld	de,6
	call	atcmd
	ld	de,mstm
	jp	c,lose

	ld	hl,msave	; save flash config
	ld	de,6
	call	atcmd
	ld	de,msvm
	jp	c,lose

	ld	hl,cfera	; erase mqtt page
	ld	de,6
	call	atcmd
	ld	de,eram
	jp	c,lose

	ld	hl,cfwr		; send flash write cmd
	ld	de,1
	call	atcmd
	ld	de,wrm
	jp	c,lose

	ld	hl,tbuf
	ld	bc,100
	ld	de,4
	call	atcmdl
	ld	de,wrm
	jp	c,lose

	ld	de,donem
win:
	call	outstr	
	ret

lose:	call	outstr
	ret

sep1:	ld	hl,del1
	call	strcpy
	ret

apch:	ld	(de),a
	inc	de
	ret

edit:	ld	de,tbuf
	call	outstr

	ld	de,tbuf
	call	strlen
	
eloop:	call	getch
	cp	3		; control C exits immediately
	jp	z,0

	cp	ESC		; function keys
	jr	nz,chkbs
	call	getch
	cp	'['
	jr	nz,eloop
	call	getch
	cp	'A'
	jr	nc,eloop
tilde:	call	getch
	cp	'~'
	jr	nz,tilde
	jr	eloop
chkbs:	cp	DEL
	jr	z,bskey
	cp	BS
	jr	nz,chkcr
bskey:	ld	hl,tbuf
	sbc	hl,de
	jr	z,eloop

	ld	a,BS
	call	putch
	ld	a,SPACE
	call	putch
	ld	a,BS
	call	putch
	xor	a
	dec	de
	ld	(de),a
	jr	eloop	

chkcr:	cp	CR
	jr	nz,ichar
	call	putch
	ld	a,LF
	call	putch
	ret

ichar:	ld	(de),a
	call	putch
	inc	de
	xor	a
	ld	(de),a
	jr	eloop	
;
; getch: read a character from the keyboard to A
;
getch:	push	bc
	push	de
	push	hl
gpoll:	ld	c,6
	ld	e,0ffh
	call	5
	or	a
	jr	z,gpoll
	pop	hl
	pop	de
	pop	bc
	ret

putch:	push	bc
	push	de
	push	hl
	ld	c,6
	ld	e,a
	call	5
	pop	hl
	pop	de
	pop	bc
	ret
;
; edit buffer
; DE is buffer, HL is prompt
;
prval:	push	de
	push	de
	ex	de,hl
	call	outstr
	pop	hl
	ld	de,tbuf
	call	strcpy
	call	edit	
	pop	de
	ld	hl,tbuf
	call	strcpy
	ret
	
;
; do like cpdelim, only don't copy quotes.
; we do this by call cpdelim and stripping the quotes
; HL is the source, DE is destination
; we temporarily copy it to tbuf
;
qdelim::ld	b,d		; save the destination
	ld	c,e
	ld	de,tbuf
	call	cpdelim	
	ret	c		; if end of string
	push	hl		; save our source pointer

	dec	de		; points at the null
	ld	a,(de)
	cp	'"'
	jr	nz,notq		; not a trailing quote
	xor	a
	ld	(de),a		; make it a null
notq:	ld	de,tbuf
	ld	a,(de)
	cp	'"'
	jr	nz,notq1	; not a leading quote
	inc	de

	; now, DE is pointing into tbuf at our stripped value

notq1:	ld	h,b		; copy 
	ld	l,c	
	ex	de,hl
	call	strcpy		; copy HL to de
	pop	hl
	ret

dumpit:
	ld	de,ssidm
	call	outstr
	ld	de,ssid
	call	outstr
	ld	de,crlf
	call	outstr

	ld	de,passm
	call	outstr
	ld	de,pass
	call	outstr
	ld	de,crlf
	call	outstr

	ld	de,hostm
	call	outstr
	ld	de,host
	call	outstr
	ld	de,crlf
	call	outstr

	ld	de,portm
	call	outstr
	ld	de,port
	call	outstr
	ld	de,crlf
	call	outstr
	ret

	end
