	.Z80	; Accept Z80 instruction format
	maclib	Z80.LIB

bdos	equ	0005h

buflen	equ	128

; standard BDOS calls
wboot	equ	0
conin	equ	1
conout	equ	2
print	equ	9
gtline	equ	10
getver	equ	12
open	equ	15
close	equ	16
serfst	equ	17
sernxt	equ	18
delete	equ	19
sread	equ	20
swrite	equ	21
make	equ	22
rename	equ	23
setdma	equ	26
sguser	equ	32
rread	equ	33
rwrite	equ	34
fsize	equ	35
errmod	equ	45
gttime	equ	105

; CP/NET (NDOS) calls
ncfgtb	equ	69
nsvcfg	equ	71

; MP/M (XDOS) calls
xprio	equ	145
xsdpa	equ	154
; Offsets in SDP
sdpcpn	equ	9		; CP/Net master config table
sdptmp	equ	196

; Offsets in Server Config Table (as used by CP/Net Clients)
scttmp	equ	0		; Temp file drive
sctsts	equ	1		; Network (device) status (MP/M SDP entry points here)
sctnid	equ	2		; Node ID
sctmax	equ	3		; Max allowed logins
sctcur	equ	4		; Num logged in
sctvec	equ	5		; (word) Login vector
sctrid	equ	7		; 16x1 Table of remote node IDs logged in
sctlen	equ	23		; Length of table

; Offsets in Client Config Table
nctsts	equ	0		; Network (device) status
nctnid	equ	1		; Node ID
nctmap	equ	2		; 16x2 Map of disk drives
nctcon	equ	34		; Map for CON:
nctlst	equ	36		; Map for LST:
nctidx	equ	38		; Index into LST: buffer
nctmsg	equ	39		; CP/NET message buffer for 129-byte payload (LST: buffer)
nctlen	equ	173		; Length of table

; Offsets in standard FCB
fcbdrv	equ	0		; Disk drive, 1-16, or 0 for current default
fcbnam	equ	1		; 8x NAME begins
fcbtyp	equ	9		; 3x TYPE begins
fcbext	equ	12		; EXT byte
fcbs1	equ	13		; S1
fcbs2	equ	14		; S2
fcbrc	equ	15		; RC - Record Count of extent
fcbd0	equ	16		; 16x D0-D15, internal use only
fcbren	equ	fcbd0		; Second name entry for RENAME
fcbcr	equ	32		; CR - current record (within extent)
fcbrr0	equ	33		; 3x RR - random record number
fcblen	equ	36		; Length of full FCB

cr	equ	13
lf	equ	10
eof	equ	26		; End Of Message marker, plus text EOF

; MAIL constants
msgmxr	equ	13		; max records for MAIL message, excl. subject/header
msgtyp	equ	0		; Record type - 0AAH, 000H/01AH.
msgsiz	equ	1		; Record data len - includes "from" on rec 0
msghdr	equ	2		; overhead in records 1-N. Data begins here.
msgmax	equ	buflen-msghdr	; max length of data in record
; Record 0 - Subject and Envelope information
msgfrm	equ	2		; From: ID
msghd0	equ	3		; record 0 - subject text begins here
msgtim	equ	4		; time/date at end of record
msgmxs	equ	buflen-msghd0-msgtim	; max length of Subject text
; Record types
msgsom	equ	0AAh		; Start Of Message marker (first/subject record)
msgeom	equ	eof		; End Of Message marker (last record)
msgdat	equ	0		; Middle Record(s) marker.
msgdel	equ	0FFh		; Deleted Record(s) marker (until next packfile).

	org	0100h
	jp	start

	defb	'MAIL Version 1.2COPYRIGHT 1982, DIGITAL RESEARCH080282'

start:
	ld	sp,stack
	ld	e,0FFh
	ld	c,errmod
	call	bdos
	ld	e,0FFh
	ld	c,sguser
	call	bdos
	ld	(curusr),a
	ld	c,getver
	call	bdos
	ld	(version),hl
	ld	a,h
	and	01h
	jp	nz,mpminit
	ld	a,h
	and	02h
	jp	nz,cpninit
; CP/M is an error... for now...
	ld	de,cpmerr
exit0:
	ld	c,print
	call	bdos
exit1:
	ld	a,(curusr)
	ld	e,a
	ld	c,sguser
	call	bdos
	ld	c,wboot
	jp	bdos		; no return
;----------------------------------

mpminit:

	ld	c,xsdpa
	call	bdos
	ld	e,l
	ld	d,h
	ld	bc,sdpcpn
	add	hl,bc
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	push	hl		; MP/M Net Srv Cfg Table
	ld	hl,sdptmp
	add	hl,de
	ld	a,(hl)
	ld	(srvcfg+scttmp),a
	; BUG: by copying table, we use stale data
	; when searching logged-in nodes. Problem
	; increases the longer the user is in MAIL.
	ld	hl,srvcfg+sctsts
	pop	de
	ld	bc,22
	ldir
	ld	a,(srvcfg+sctnid)
	ld	(myid),a
	ld	e,100
	ld	c,xprio
	call	bdos
	jp	main

cpninit:

	ld	c,ncfgtb
	call	bdos
	ld	(netcfg),hl
	inc	hl
	ld	a,(hl)
	ld	(myid),a
main:
	ld	hl,msgbuf
	ld	(hl),msgeom
	inc	hl
	ld	(hl),0
toploop:

	ld	a,1
	call	getopt
	or	a
	jp	z,bcast
	dec	a
	jp	z,send
	dec	a
	jp	z,recv
	dec	a
	jp	z,exit1
; error?
	jp	toploop

;;;;;;;; BROADCAST A MESSAGE ;;;;;;;;;;
bcast:
	call	getsubject
	ld	a,2
	call	getopt
	or	a
	jp	z,bcast1
	call	gettext
	jp	bcast2
bcast1:
	call	getinputfile
bcast2:
	ld	a,(version+1)
	and	02h
	jp	nz,bccpnet

bcmpm:
	ld	a,(srvcfg+scttmp)
	ld	(mailfcb+fcbdrv),a
	ld	b,255		; exclude node - none
	call	bcast5
	jp	toploop

bccpnet:

bccpn0:
	call	findtmp		; sets up srvcfg
	or	a
	jp	z,toploop
	cp	0FFh
	jp	z,bccpn0
	ld	(mailfcb+fcbdrv),a
	ld	a,(myid)
	ld	b,a		; exclude node - ourself
	call	bcast5
	jp	bccpn0

bcast5:
	ld	hl,srvcfg+sctrid
	ex	de,hl
	ld	hl,(srvcfg+sctvec)
	ld	c,16
bcmpm0:
	ld	a,l
	and	1
	jp	z,bcmpm2
	ld	a,(de)		; target node ID
	cp	b
	jp	z,bcmpm2
	push	hl
	push	de
	push	bc
	call	getmailfile	; A still target node ID
	or	a
	jp	nz,op1error	; mailfcb
	call	addmsg
	pop	bc
	pop	de
	pop	hl
bcmpm2:
	rr	h
	rr	l
	inc	de
	dec	c
	jp	nz,bcmpm0
	ret

;;;;;;;; SEND A MESSAGE ;;;;;;;;;;
send:
	call	getnodeid
	ld	(tonode),a
	call	getsubject
	ld	a,2
	call	getopt
	or	a
	jp	z,send1
	call	gettext
	jp	send2
send1:
	call	getinputfile
send2:
	ld	a,(version+1)
	and	02h
	jp	nz,sncpnet
snmpm:
	ld	a,(srvcfg+scttmp)
	ld	(mailfcb+fcbdrv),a
	ld	a,(tonode)
	call	getmailfile
	or	a
	jp	nz,op1error	; mailfcb
	call	addmsg
	jp	toploop

sncpnet:


	; Locate first server or logged-in node matching dest.
	; This code may not be thorough enough.
sncpn0:
	call	findtmp
	or	a
	jp	z,sncpn4
	cp	0FFh
	jp	z,sncpn0
	ld	(mailfcb+fcbdrv),a
	ld	a,(tonode)
	ld	b,a
	ld	a,(srvcfg+sctnid)
	cp	b
	jp	nz,sncpn1
	; send to server
	ld	a,b
	call	getmailfile
	cp	0FFh
	jp	z,op1error
	call	addmsg
	jp	sncpn6		; cleanup
	; Search server for logged-in node
sncpn1:
	ld	hl,srvcfg+sctrid
	ex	de,hl
	ld	hl,(srvcfg+sctvec)
	ld	c,16
	ld	a,(tonode)
	ld	b,a
sncpn2:
	ld	a,l
	and	1
	jp	z,sncpn3
	ld	a,(de)		; target node ID
	cp	b
	jp	nz,sncpn3
	ld	a,b
	call	getmailfile	; A still target node ID
	or	a
	jp	nz,op1error	; mailfcb
	call	addmsg
	jp	sncpn6		; cleanup
sncpn3:
	rr	h
	rr	l
	inc	de
	dec	c
	jp	nz,sncpn2
	; need to look for more servers...
	jp	sncpn0

	; node not logged in (and not a server),
	; find any server with temp drive and deliver there.
sncpn4:
	call	findtmp
	or	a
	jp	z,sncpn5
	cp	0FFh
	jp	z,sncpn4
	ld	(mailfcb+fcbdrv),a
	ld	a,(tonode)
	call	getmailfile
	or	a
	jp	nz,op1error
	call	addmsg
sncpn6:				; search until end so findtmp does cleanup
	call	findtmp
	or	a
	jp	nz,sncpn6
	jp	toploop
sncpn5:
	ld	de,notmps
	jp	exit0

;;;;;;;; RECEIVE MAIL ;;;;;;;;;;
recv:
	ld	a,(version+1)
	and	02h
	jp	nz,rcvcpn
	ld	a,(srvcfg+scttmp)
	ld	(mailfcb+fcbdrv),a	; localtemp set in FCB
	jp	rcvmpm
rcvcpn:
recv0:
	ld	a,(version+1)
	and	02h
	jp	z,toploop	; MP/M stops here
	call	findtmp
	or	a
	jp	z,recv8		; no cleanup needed, already done in case of zero....
	cp	0FFh
	jp	z,recv0
	ld	(mailfcb+fcbdrv),a	; localtemp set in FCB
rcvmpm:
	; localtemp, myid are set elsewhere
	call	viewmail
	or	a
	jp	z,recv0
	dec	a
	jp	z,toploop
recv8:
	ld	de,nomore
	ld	c,print
	call	bdos
	jp	toploop

; B = myid, C = localtmp
; localtmp already set in mailfcb+FCBDRV...
; myid is set.
viewmail:

	ld	hl,0
	ld	(mrec0),hl
	ld	(mrec1),hl
vmail0:
	ld	a,(myid)
	call	getmailfile
	or	a
	jp	nz,op1error	; mailfcb
	call	rdmail
	or	a
	jp	nz,rstop2
	ld	c,conin
	call	bdos
	ld	a,3
	call	getopt
	or	a
	jp	z,rstop		; 1: Stop Receiving Mail
	dec	a
	jp	z,ransw		; 2: Answer Message
	dec	a
	jp	z,rdelt		; 3: Delete Message
	dec	a
	jp	z,ransdl	; 4: Answer and Delete
	dec	a
	jp	nz,vmail0	; 6: Next Message
	ld	hl,(mrec0)	; 5: Re-examine current message
	ld	(mrec1),hl
	jp	vmail0

rstop2:				; EOF on mail file
	call	packfile
	ld	a,2
	ret

rstop:				; 1: Stop Receiving Mail
	call	packfile
	ld	a,1
	ret

ransw:				; 2: Answer Message
	call	replymsg
	jp	vmail0

rdelt:				; 3: Delete Message
	call	delmsg
	jp	vmail0

ransdl:				; 4: Answer and Delete
	call	replymsg
	call	delmsg
	jp	vmail0

; end viewmail

; Show current menu and get option selection...
; A=currrent menu level (1, 2, 3)
getopt:
	dec	a
	push	af
	ld	de,crlf2
	ld	c,print
	call	bdos
	ld	de,crlf2
	ld	c,print
	call	bdos
	pop	af
	push	af
	add	a,a
	ld	e,a
	ld	d,0
	ld	hl,mnutab
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	c,print
	call	bdos
	ld	de,prompt
	ld	c,print
	call	bdos
	ld	a,2
	ld	(cmdline+0),a
	ld	de,cmdline
	ld	c,gtline
	call	bdos
	pop	af
	ld	e,a
	ld	d,0
	ld	hl,numopt
	add	hl,de
	ld	a,(cmdline+1)
	cp	1
	jp	nz,getop1
	ld	a,(cmdline+2)
	sub	'0'
	or	a
	jp	z,getop1
	cp	(hl)
	jp	nc,getop1
	dec	a
	ret
getop1:
	ld	a,(hl)
	dec	a
	ret

; Print filename of FCB in DE.
prfile:
	ld	a,(de)		; drive, 1..16
	dec	a
	add	a,'A'
	push	de
	ld	e,a
	ld	c,conout
	call	bdos
	ld	e,':'
	ld	c,conout
	call	bdos
	pop	de
	ld	c,8
	call	prfil0
	push	de
	ld	e,'.'
	ld	c,conout
	call	bdos
	pop	de
	ld	c,3
	call	prfil0
	ld	de,crlf
	ld	c,print
	jp	bdos

prfil0:
	ld	a,(de)
	push	de
	push	bc
	ld	e,a
	ld	c,conout
	call	bdos
	pop	bc
	pop	de
	inc	de
	dec	c
	jp	nz,prfil0
	ret

op2error:

	ld	de,msgfcb
	jp	opnerror
op1error:

	ld	de,mailfcb
opnerror:

	ld	hl,operrm
errexit:

	push	de
	ex	de,hl
	ld	c,print
	call	bdos
	pop	de
	call	prfile
	jp	exit1

rd2error:

	ld	de,msgfcb
	jp	rderror
rd1error:

	ld	de,mailfcb
rderror:

	ld	hl,rderrm
	jp	errexit

wr2error:

	ld	de,msgfcb
	jp	wrerror
wr1error:

	ld	de,mailfcb
wrerror:

	ld	hl,wrerrm
	jp	errexit


; Return:
;  0:  No (more) servers,
;  0ffh:   Error, or temp drive not mapped
;  1-16:   Temp drive is local drive A-P
; Local vars:
tmpdrv:	defb	0
tmploc:	defb	0
curdrv:	defb	0
tmpff:	defb	0

findtmp:

	ld	a,0FFh
	ld	(tmploc),a
	ld	(tmpdrv),a
	ld	b,a		; cursrv
	ld	c,020h		; tmpflg
	xor	a
	ld	(curdrv),a
	ld	hl,(netcfg)
	inc	hl		;
	inc	hl		; +NCTMAP
findt0:
	ld	a,(hl)
	and	0C0h
	or	c
	ld	(tmpff),a
	cp	0A0h
	jp	nz,findt1
	ld	c,0
	inc	hl
	ld	b,(hl)		; cursrv
	dec	hl
	push	hl
	push	bc
	ld	e,b
	ld	c,nsvcfg
	call	bdos
	ld	a,l
	cp	0FFh
	jp	nz,findt5
	ld	a,h
	cp	00Ch
	jp	nz,findt5
	ld	a,0FFh
	pop	bc
	pop	hl
	ret
findt5:				; HL=valid server config tbl
	ld	de,srvcfg
	ld	bc,sctlen
	ldir
	ld	a,(srvcfg+scttmp)	; server tmp drive
	ld	(tmpdrv),a
	pop	bc
	pop	hl
findt1:
	ld	a,(tmpff)
	and	0C0h
	cp	080h
	jp	nz,findt2
	inc	hl
	ld	a,(hl)
	dec	hl
	cp	b
	jp	nz,findt2
	ld	a,040h
	or	(hl)
	ld	(hl),a
	and	0Fh
	ld	e,a
	ld	a,(tmpdrv)
	cp	e
	jp	nz,findt2
	ld	a,(curdrv)
	inc	a
	ld	(tmploc),a
findt2:
	inc	hl
	inc	hl
	ld	a,(curdrv)
	inc	a
	ld	(curdrv),a
	cp	16
	jp	c,findt0
	ld	a,b
	cp	0FFh
	jp	nz,findt3
	; cleanup - end of servers
findinit:

	xor	a
	ld	(tmploc),a
	ld	(curdrv),a
	ld	hl,(netcfg)
	inc	hl		;
	inc	hl		; +NCTMAP
	ld	c,16
findt4:				; cleanup - reset temp flags
	ld	a,08Fh
	and	(hl)
	ld	(hl),a
	inc	hl
	inc	hl
	dec	c
	jp	nz,findt4
	xor	a
	ret			; no (more) servers
findt3:
	ld	a,(tmploc)
	ret

; A = target node ID, drive set in mailfcb
getmailfile:

	; don't overwrite FCBDRV, already setup...
	ld	hl,mailtex+fcbnam
	ld	de,mailfcb+fcbnam
	ld	bc,fcblen-fcbnam
	ldir
	push	af
	rrca
	rrca
	rrca
	rrca
	call	tohex
	ld	(mailfcb+fcbnam),a
	pop	af
	call	tohex
	ld	(mailfcb+fcbnam+1),a
	ld	de,dskbuf
	ld	c,setdma
	call	bdos
	ld	de,mailfcb
	ld	c,serfst
	call	bdos
	ld	c,open
	cp	0FFh
	jp	nz,getmf1
	ld	c,make
getmf1:
	ld	de,mailfcb
	call	bdos
	cp	0FFh
	ret	nz
	ld	hl,48
getmf2:
	push	hl
	ld	de,mailfcb
	ld	c,open
	call	bdos
	pop	hl
	cp	0FFh
	ret	nz
	dec	hl
	ld	a,l
	and	03h
	cp	1
	jp	nz,getmf3
	push	hl
	ld	de,waitm
	ld	c,print
	call	bdos
	pop	hl
getmf3:
	ld	a,l
	or	h
	jp	nz,getmf2
	ld	a,0FFh
	ret

; Used by getinputfile(internally) and gettext/nxtbyte(shared)
bytcnt:	defb	0
; Purely local to getinputfile
dptr:	defw	0

getinputfile:

	ld	a,(curusr)
	ld	e,a
	ld	c,sguser
	call	bdos
	ld	de,l1DD8h
	ld	c,print
	call	bdos
	ld	a,15
	ld	(cmdline+0),a
	ld	de,cmdline
	ld	c,gtline
	call	bdos
	ld	hl,cmdline+2
	ld	a,(cmdline+1)
	ld	e,a
	ld	d,0
	inc	hl
	add	hl,de
	ld	(hl),0		; NUL terminate
	ld	hl,blankfile
	ld	de,msgfcb
	ld	bc,fcblen
	ldir
	ld	c,8
	ld	de,msgfcb+fcbnam
	ld	hl,cmdline+2
	ld	a,(cmdline+3)
	cp	':'
	jp	nz,getif1
	ld	a,(hl)
	inc	hl
	inc	hl
	sub	'A'
	inc	a
	ld	(msgfcb+fcbdrv),a
getif1:
	ld	a,(hl)
	or	a
	jp	z,getif2
	inc	hl
	cp	'.'
	jp	z,getif2
	ld	(de),a
	inc	de
	dec	c
	jp	nz,getif1
getif2:
	ld	c,3
getif3:
	ld	a,(hl)
	or	a
	jp	z,getif4
	inc	hl
	ld	(de),a
	inc	de
	dec	c
	jp	nz,getif3
getif4:
	ld	de,msgfcb
	ld	c,open
	call	bdos
	cp	0FFh
	jp	z,op2error
	ld	de,dskbuf
	ld	c,setdma
	call	bdos

	ld	c,msgmax	; C=offset
	ld	b,msgmxr	; max reccnt
	ld	de,msgbuf+buflen	; DE=recptr
	ld	hl,2
	add	hl,de		; HL=ptr
	xor	a
	ld	(bytcnt),a
getif5:
	push	de
	push	bc
	push	hl
	ld	de,msgfcb
	ld	c,sread
	call	bdos
	or	a
	jp	nz,getif6	; must pop!
	pop	hl
	pop	bc
	push	bc
	push	hl
	ld	de,dskbuf
	ex	de,hl
	ld	b,0
	ldir			; HL=(dptr += offset)
	ld	(dptr),hl
	ld	hl,bytcnt
	inc	(hl)
	inc	(hl)		; bytcnt += 2
	pop	hl
	pop	bc
	pop	de
	ld	a,msgdat
	ld	(de),a		; rec type 0 - more follows...
	dec	b
	jp	z,getif7	; overflow
	ld	hl,buflen
	add	hl,de
	ex	de,hl		; recptr += BUFLEN;
	ld	hl,2
	add	hl,de		; ptr = recptr + 2;
	dec	c
	dec	c		; offset -= 2;
	push	de
	push	bc
	ex	de,hl		; DE=ptr
	ld	hl,(dptr)
	ld	a,(bytcnt)
	ld	c,a
	ld	b,0
	ldir			; DE=(ptr+=bytcnt)
	ex	de,hl		; HL=ptr
	pop	bc
	pop	de
	jp	getif5
getif7:
	ld	a,msgeom
	ld	(de),a
	inc	de
	ld	a,msgmax
	ld	(de),a
getif9:
	ld	de,msgfcb
	ld	c,close
	call	bdos
	ld	e,0
	ld	c,sguser
	jp	bdos
getif6:				; EOF or error...
	cp	1
	jp	nz,rd2error	; no need to pop...
	; look for ASCII EOF...
	pop	hl		; ptr
	pop	bc		; offset
	pop	de		; recptr
	ex	de,hl
	dec	h		; HL -= 256
	push	hl
	ld	de,2
	add	hl,de
	ld	bc,msgmax
	ld	a,eof
	cpir
	pop	hl
	jp	nz,getif8
	ld	(hl),a
	inc	hl
	ld	a,msgmax
	sub	c
	ld	(hl),a
	jp	getif9
getif8:
	ld	de,buflen
	add	hl,de
	push	hl
	inc	hl
	ld	c,(hl)		; length
	ld	b,0
	inc	hl
	ld	a,eof
	cpir
	pop	hl
	ld	(hl),a
	inc	hl
	ld	a,msgmax
	sub	c		; C could be 0
	ld	(hl),a
	jp	getif9

; Used by gettext/nxtbyte to share context
reccnt:	defb	0
recptr:	defw	0
msgptr:	defw	0

; A = bytcnt, returns new bytcnt
nxtbyte:

	ld	a,(bytcnt)
	inc	a
	ld	(bytcnt),a	; not needed if end of rec...
	ld	hl,(msgptr)
	inc	hl
	ld	(msgptr),hl	; not needed if end of rec...
	cp	msgmax
	ret	c		; within same record, keep going.
	ld	hl,(recptr)
	ld	(hl),msgdat
	ld	a,(reccnt)	; include header/subject record
	inc	a
	cp	msgmxr+1
	jp	nc,nxtby1	; overflow
	ld	(reccnt),a	; point to next record
	ld	de,buflen
	add	hl,de
	ld	(recptr),hl
	inc	hl
	inc	hl
	ld	(msgptr),hl
	xor	a
	ld	(bytcnt),a
	ret
nxtby1:
	ld	(hl),msgeom
	inc	hl
	ld	(hl),msgmax
	ld	a,0FFh
	ret

gettext:

	ld	de,entmsg
	ld	c,print
	call	bdos
	ld	de,crlf
	ld	c,print
	call	bdos
	ld	a,78
	ld	(cmdline+0),a
	ld	a,1
	ld	(reccnt),a
	ld	hl,msgbuf+buflen
	ld	(recptr),hl
	inc	hl
	inc	hl
	ld	(msgptr),hl
	xor	a
	ld	(bytcnt),a
gettx0:
	ld	de,cmdline
	ld	c,gtline
	call	bdos
	ld	de,crlf
	ld	c,print
	call	bdos
	ld	hl,cmdline+1
	ld	e,(hl)
	ld	d,0
	inc	hl
	add	hl,de
	ld	(hl),0		; NUL terminate
	ld	hl,cmdline+2
gettx1:
	ld	a,(hl)
	or	a
	jp	z,gettx2
	cp	eof
	jp	z,gettx9
	inc	hl
	push	hl
	ld	hl,(msgptr)
	ld	(hl),a
	call	nxtbyte
	cp	0FFh
	pop	hl
	jp	nz,gettx1
	ret			; overflow
gettx2:
	push	hl
	ld	hl,(msgptr)
	ld	(hl),cr
	call	nxtbyte
	cp	0FFh
	pop	hl
	ret	z
	push	hl
	ld	hl,(msgptr)
	ld	(hl),lf
	call	nxtbyte
	cp	0FFh
	pop	hl
	ret	z
	jp	gettx0
gettx9:
	ld	hl,(recptr)
	ld	(hl),msgeom
	inc	hl
	ld	a,(bytcnt)
	ld	(hl),a
	ret

getsubject:

	ld	a,80
	ld	(cmdline+0),a
	ld	de,l1DEBh
	ld	c,print
	call	bdos
	ld	de,cmdline
	ld	c,gtline
	call	bdos
	ld	hl,msgbuf
	ld	(hl),msgsom
	inc	hl
	ld	a,(cmdline+1)
	ld	c,a
	inc	a
	ld	(hl),a
	inc	hl
	ld	a,(myid)
	ld	(hl),a
	inc	hl
	ex	de,hl
	ld	hl,cmdline+2
	ld	b,0
	ldir
	ld	hl,msgbuf+buflen-msgtim
	call	stdate
	ret

addmsg:
	ld	de,mailfcb
	ld	c,fsize
	call	bdos
	cp	0FFh
	jp	z,wr1error
	ld	hl,msgbuf
	ld	c,msgmxr+1
addmg0:
	push	hl
	push	bc
	ex	de,hl
	ld	c,setdma
	call	bdos
	ld	de,mailfcb
	ld	c,rwrite
	call	bdos
	or	a
	jp	nz,wr1error
	ld	hl,(mailfcb+fcbrr0)
	inc	hl
	ld	(mailfcb+fcbrr0),hl
	pop	bc
	pop	hl
	ld	a,(hl)
	cp	msgeom
	jp	z,addmg1
	ld	de,buflen
	add	hl,de
	dec	c
	jp	nz,addmg0
addmg1:
	ld	de,mailfcb
	ld	c,close
	call	bdos
	cp	0FFh
	jp	z,wr1error
	ret

; assume < 100
decout:
	ld	b,'0'
decot0:
	sub	10
	jp	c,decot1
	inc	b
	jp	decot0
decot1:
	add	a,10
	add	a,'0'
	push	af
	ld	a,b
	call	prout
	pop	af
	jp	prout

hexout:
	push	af
	rrca
	rrca
	rrca
	rrca
	call	hexdig
	pop	af
hexdig:
	call	tohex
prout:
	ld	e,a
	ld	c,conout
	jp	bdos

tohex:
	and	0Fh
	add	a,90h
	daa
	adc	a,40h
	daa
	ret

; Keeps number in HL - caller must preserve/init
; Returns CY for invalid
hexnum:
	sub	'0'
	ret	c
	cp	9+1
	jp	nc,hexnm1
hexnm2:
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	or	l
	ld	l,a
	ret
hexnm1:
	sub	'A'-'9'
	ret	c
	cp	5+1
	ccf
	ret	c
	add	a,10
	jp	hexnm2


; prompt for node ID and parse input into hex number
getnodeid:

	ld	a,3
	ld	(cmdline+0),a
getni0:
	ld	de,l1DFFh
	ld	c,print
	call	bdos
	ld	de,cmdline
	ld	c,gtline
	call	bdos
	ld	a,(cmdline+1)
	or	a
	jp	z,getni2
	cp	3
	jp	nc,getni2
	ld	hl,0
	ld	de,cmdline+2
	ld	a,(cmdline+1)
	ld	c,a
getni1:
	ld	a,(de)
	inc	de
	call	hexnum
	jp	c,getni2
	dec	c
	jp	nz,getni1
	ld	a,l
	ret
getni2:
	ld	de,l1E12h
	ld	c,print
	call	bdos
	jp	getni0

; HL=string, C=length
strout:
	ld	a,c
	or	a
	ret	z
strou0:
	ld	e,(hl)
	push	hl
	push	bc
	ld	c,conout
	call	bdos
	pop	bc
	pop	hl
	inc	hl
	dec	c
	jp	nz,strou0
	ret

; Load one message into msgbuf and display it
; Message to load is from record number mrec1
rdmail:
	ld	de,mailfcb
	ld	c,fsize
	call	bdos
	cp	0FFh
	jp	z,rd1error
	ld	hl,(mrec1)
	ex	de,hl
	ld	hl,(mailfcb+fcbrr0)
	or	a
	sbc	hl,de
	jp	z,rdmai9
	ex	de,hl
	ld	(mailfcb+fcbrr0),hl
	ld	hl,msgbuf	; recptr
	ld	c,msgmxr+1
rdmai0:
	push	hl
	push	bc
	ex	de,hl
	ld	c,setdma
	call	bdos
	ld	de,mailfcb
	ld	c,rread
	call	bdos
	or	a
	jp	nz,rd1error
	ld	hl,(mailfcb+fcbrr0)
	inc	hl
	ld	(mailfcb+fcbrr0),hl
	pop	bc
	pop	hl
	ld	a,(hl)
	cp	msgeom
	jp	z,rdmai1
	ld	de,buflen
	add	hl,de
	dec	c
	jp	nz,rdmai0
	jp	rd1error

rdmai1:
	ld	hl,(mrec1)
	ld	(mrec0),hl
	ld	hl,(mailfcb+fcbrr0)
	ld	(mrec1),hl
	ld	de,mailfcb
	ld	c,close
	call	bdos
	cp	0FFh
	jp	z,rd1error
rdmai2:
	; TODO handle status bit(s)...
	ld	a,(msgbuf)
	cp	msgsom
	jp	nz,rd1error
	ld	de,crlf2
	ld	c,print
	call	bdos
	ld	de,l1E2Ah
	ld	c,print
	call	bdos
	ld	a,(msgbuf+msgfrm)
	call	hexout
	; TODO handle date/time
	ld	de,l1E3Eh
	ld	c,print
	call	bdos
	ld	hl,msgbuf+buflen-4
	call	prdate
	ld	de,l1E3Dh
	ld	c,print
	call	bdos
	ld	hl,msgbuf+msghd0
	ld	a,(msgbuf+msgsiz)
	dec	a		; don't count From ID
	ld	c,a
	call	strout
	ld	de,crlf2
	ld	c,print
	call	bdos
	ld	hl,msgbuf+buflen	; recptr
	ld	c,msgmxr
rdmai4:
	push	hl
	push	bc
	ld	a,(hl)		; MSGTYP
	inc	hl
	cp	msgeom
	jp	nz,rdmai5
	ld	c,(hl)		; MSGSIZ
	jp	rdmai6
rdmai5:
	ld	c,msgmax
rdmai6:
	inc	hl
	call	strout
	pop	bc
	pop	hl
	ld	a,(hl)		; MSGTYP
	cp	msgeom
	ld	a,0
	ret	z
	ld	de,buflen
	add	hl,de		; HL (recptr) += BUFLEN
	dec	c
	jp	nz,rdmai4
	jp	rd1error
rdmai9:
	ld	de,mailfcb
	ld	c,close
	call	bdos
	cp	0FFh
	jp	z,rd1error
	ld	a,0FFh
	ret

delmsg:
	ld	a,(myid)
	call	getmailfile
	cp	0FFh
	jp	z,op1error
	ld	hl,msgbuf
	ld	(hl),msgdel
	ld	de,msgbuf+1
	ld	bc,buflen-1
	ldir			; memset entire record - no shadow data
	ld	de,msgbuf
	ld	c,setdma
	call	bdos
	ld	hl,(mrec0)
	ld	(mailfcb+fcbrr0),hl
delmg0:
	ld	de,mailfcb
	ld	c,rwrite
	call	bdos
	or	a
	jp	nz,wr1error
	ld	hl,(mailfcb+fcbrr0)
	inc	hl
	ld	(mailfcb+fcbrr0),hl
	ex	de,hl
	ld	hl,(mrec1)
	ex	de,hl
	or	a
	sbc	hl,de
	jp	c,delmg0
	ld	de,mailfcb
	ld	c,close
	call	bdos
	cp	0FFh
	jp	z,wr1error
	ret

replymsg:

	ld	hl,msgbuf+msgmxs-restrl
	ld	de,msgbuf+msgmxs
	ld	bc,msgmxs-restrl
	lddr
	ld	hl,restr
	ld	de,msgbuf+msghd0
	ld	bc,restrl
	ldir
	ld	hl,msgbuf+buflen-msgtim
	call	stdate
	ld	hl,msgbuf+msgsiz
	ld	a,restrl
	add	a,(hl)
	cp	msgmxs+1	; length includes "from" byte
	jp	c,rpymg1
	ld	a,msgmxs+1
rpymg1:
	ld	(hl),a
	call	gettext
	ld	a,(msgbuf+msgfrm)	; "From" node ID
	ld	b,a
	ld	a,(myid)
	ld	(msgbuf+msgfrm),a
	ld	a,b
	call	getmailfile
	cp	0FFh
	jp	z,op1error
	call	addmsg
	ret

packfile:

	xor	a
	ld	(mailfcb+fcbcr),a
	ld	(mailfcb+fcbext),a
	ld	(mailfcb+fcbs2),a
	ld	hl,mailfcb
	ld	de,msgfcb
	ld	bc,fcblen
	ldir
	ld	hl,tmpsuf
	ld	de,mailfcb+fcbtyp
	ld	bc,3
	ldir
	ld	de,dskbuf
	ld	c,setdma
	call	bdos
	ld	de,msgfcb
	ld	c,open
	call	bdos
	cp	0FFh
	jp	z,op2error
	ld	de,mailfcb
	ld	c,make
	call	bdos
	cp	0FFh
	jp	z,op1error
pkfil0:
	ld	de,msgfcb
	ld	c,sread
	call	bdos
	or	a
	jp	nz,pkfil1
	ld	a,(dskbuf+msgtyp)
	cp	msgdel
	jp	z,pkfil0
	ld	de,mailfcb
	ld	c,swrite
	call	bdos
	or	a
	jp	nz,wr1error
	jp	pkfil0
pkfil1:
	cp	1
	jp	nz,rd2error
	ld	de,mailfcb
	ld	c,close
	call	bdos
	cp	0FFh
	jp	z,wr1error
	ld	de,msgfcb
	ld	c,delete
	call	bdos
	cp	0FFh
	jp	z,rd2error
	ld	hl,msgfcb
	ld	de,mailfcb+fcbren
	ld	bc,16
	ldir
	ld	de,mailfcb
	ld	c,rename
	call	bdos
	cp	0FFh
	jp	z,wr1error
	ret

; HL = CP/M Date-time field, w/o seconds
stdate:
	ld	a,(version)
	cp	030h
	jp	c,stdat1
	ex	de,hl
	ld	c,gttime
	jp	bdos
; Could try to contact network server(s) for time...
stdat1:
	xor	a
	ld	(hl),a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(hl),a
	inc	hl
	ld	(hl),a
	ret

; HL = CP/M Date-time field, w/o seconds
; Print date and time to console.
prdate:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	push	hl
; compute year
	ld	c,78		; base year, epoch, binary
	ld	b,078h		; year, BCD
	; special-case date=0...
	ld	a,e
	or	d
	jp	nz,prdat0
	inc	de
prdat0:
	ld	hl,365
	ld	a,c
	and	03h		; Not strictly true, but works until year 2100...
	jp	nz,prdat1
	inc	hl
prdat1:	push	hl
	or	a
	sbc	hl,de
	pop	hl
	jp	nc,prdat2	; done computing year...
	ex	de,hl
	or	a
	sbc	hl,de
	ex	de,hl
	inc	c
	ld	a,b
	add	a,1
	daa
	ld	b,a
	jp	prdat0
prdat2:				; DE = days within year 'C'
	push	bc		; save (2-digit) year, B = BCD, C = binary (until 2155)
	ld	hl,month0+24
	ld	a,c
	and	03h
	jp	nz,prdat3
	ld	hl,month1+24
prdat3:				; compute month, DE = days in year,HL = mon-yr-days table adj for leap
	ld	b,12
prdat4:
	dec	hl
	dec	hl
	dec	b
	jp	m,prdat5	; should never happen...
	push	hl
	push	de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
		; DE = days in year, HL = ytd[month]
	or	a
	sbc	hl,de
	ld	a,l		; potential remainder (neg)
	pop	de
	pop	hl
	jp	nc,prdat4
prdat5:				; B = month, 0-11; A = -dom
	neg
	push	af
	inc	b
	ld	a,b
	call	decout
	ld	e,'/'
	ld	c,conout
	call	bdos
	pop	af
	call	decout
	ld	e,'/'
	ld	c,conout
	call	bdos
	pop	bc
	ld	a,b		; already BCD
	call	hexout
	ld	e,' '
	ld	c,conout
	call	bdos
	pop	hl		; -> BCD hours
	ld	a,(hl)
	inc	hl
	push	hl
	call	hexout
	ld	e,':'
	ld	c,conout
	call	bdos
	pop	hl
	ld	a,(hl)
	jp	hexout

;		J   F	M   A	M   J	J   A	S   O	N   D
month0:	defw	0, 31, 59, 90,120,151,181,212,243,273,304,334
month1:	defw	0, 31, 60, 91,121,152,182,213,244,274,305,335

; These need to be globals...
version:
	defw	0
srvcfg:	defs	sctlen
netcfg:	defw	0
curusr:	defb	0
myid:	defb	0
tonode:	defb	0

; used only as template - never written or used as fcb
mailtex:
	defb	0,'xxMAIL  TEX',0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0
blankfile:
	defb	0,'           ',0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0

; Keeps track of current/next message for Receive Mail
mrec0:	defw	0
mrec1:	defw	0

waitm:	defb	cr,lf,'Waiting for File$'
nomore:	defb	cr,lf,cr,lf,'No More Messages$'
l1dd8h:	defb	cr,lf,'Input Filename: $'
entmsg:	defb	cr,lf,'Enter message:',cr,lf,'$'
l1debh:	defb	cr,lf,'Enter Subject:'
prompt:	defb	cr,lf,'>$'
l1dffh:	defb	cr,lf,'Destination ID: $'
l1e12h:	defb	cr,lf,'ILLEGAL DESTINATION',cr,lf,'$'
l1e2ah:	defb	cr,lf,'Mail From Node #$'
l1e3dh:	defb	cr,lf,'Subject: $'
l1e3eh:	defb	cr,lf,'Date: $'
crlf2:	defb	cr,lf
crlf:	defb	cr,lf,'$'

restr:	defb	'RE: '		; pre-pended to subject each time a message answered
restrl	equ	$-restr

notmps:	defb	cr,lf,'SERVER MAIL DRIVE NOT NETWORKED',cr,lf,'$'
operrm:	defb	cr,lf,'ERROR OPENING FILE $'
rderrm:	defb	cr,lf,'ERROR READING FILE $'
wrerrm:	defb	cr,lf,'ERROR WRITING FILE $'
tmpsuf:	defb	'$$$'


mnumain:
	defb	cr,lf,'Mail Program Main Menu',cr,lf	;1ec2 0d .
	defb	cr,lf,'Select one of the following:'
	defb	cr,lf,'        1 - Broadcast'
	defb	cr,lf,'        2 - Send Mail'
	defb	cr,lf,'        3 - Receive Mail'
	defb	cr,lf,'        4 - Exit From Program'
	defb	'$'

mnusend:
	defb	cr,lf,'Select source of message:'	;1f66 0d .
	defb	cr,lf,'        1 - File'
	defb	cr,lf,'        2 - Console Input'
	defb	'$'

mnurecv:
	defb	cr,lf,'Select response:'
	defb	cr,lf,'        1 - Stop Receiving Mail'
	defb	cr,lf,'        2 - Answer Message'
	defb	cr,lf,'        3 - Delete Message From Mail File'
	defb	cr,lf,'        4 - Answer Message, Then Delete'
	defb	cr,lf,'        5 - Re-Examine Last Message'
	defb	cr,lf,'        6 - Get Next Message'
	defb	'$'

cpmerr:	defb	cr,lf,'Must Run Under MP/M or CP/NET.',cr,lf,'$'

mnutab:	defw	mnumain
	defw	mnusend
	defw	mnurecv
numopt:	defb	4,2,6		; number of options in menu

?bss	equ	$

	defs	64
stack:	defs	0

msgfcb:	defs	fcblen
mailfcb:
	defs	fcblen
cmdline:
	defs	80+2
dskbuf:	defs	buflen
msgbuf:	defs	0+(msgmxr+1)*buflen

	org	?bss		; uninitialized data in .bss
	end
