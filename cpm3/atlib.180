; subroutine library for AT command set
;
	include	mk4.lib

	public	cpdelim
	public	strlen
	public	strcpy
	public	itoa
	public	atoi
	public	ismatch
	public	atcmd
	public	atcmdl
	public	ckok

	extrn	retbuf
	extrn	wrtread

	public	outch
	public	outstr
	public	hexdump
	public	hexdmps
	public	hex2
	public	hex4
        public  dprint
	public	debugf
	public	cr1
	public	newline

; DEBUG	equ	1

ifdef   DEBUG
spew    macro   ch
        ld      a,ch
        call    dprint
        endm
else
spew    macro   ch
        endm
endif

debugf:db	0

;
; copy HL to DE, delimited by comma or null
; advance HL past delimiter if it's not null
; DE is null-terminated, and does not contain the delimiter
; if HL is delimiter or null, return carry set immediately,
;   and don't update DE
;
cpdelim:ld	a,(hl)
	or	a
	jr	z,cpdstp
	cp	','
	jr	nz,cpdlp
	inc	hl
cpdstp:	scf
	ret
cpdlp:	ld	a,(hl)
	ld	(de),a
	or	a
	jr	z,cpdret
	cp	0ffh
	jr	z,cpdret
	inc	hl
	inc	de
	cp	','
	jr	nz,cpdlp
	dec	de
cpdret:	xor	a
	ld	(de),a
	ret
;
; count buffer DE into HL
; has side effect of leaving DE pointing at null
;
strlen:	ld	hl,0
strlp:	ld	a,(de)
	or	a
	ret	z
	inc	de
	inc	hl
	jr	strlp
;
; copy null-terminated string HL to DE
; leave DE pointing at null, so useful for appending to DE
;
strcpy:	ld	a,(hl)
	ld	(de),a
	or	a
	ret	z
	inc	hl
	inc	de
	jr	strcpy
;
; return z if (HL) matches (DE), both null-terminated
;
ismatch:
isml:
	ld	a,(de)
	cp	(hl)
	ret	nz		; not equal - lose
	or	(hl)
	ret	z		; both null - match
	inc	hl
	inc	de
	jr	isml
;
; return integer in HL corresponding to string in DE.
; leave DE pointing at delimiter
;
atoi:
	ld	hl,0		; zero accu
atoin:	ld	a,(de)
	sub	'0'		; less than '0', done
	ret	c
	cp	9+1		; greater than '9', done
	ret	nc

	inc	de

	add	hl,hl		; hl *= 10
	ld	b,h
	ld	c,l		
	add	hl,hl
	add	hl,hl
	add	hl,bc

	add	l		
	ld	l,a
	ld	a,0
	adc	h
	ld	h,a
	jr	atoin
;
; take integer in HL and put it into decimal string at DE
; return A as number of characters stored
; return with DE pointing past string
;
itoa:	push	de
	pop	ix
	ld	de,'0'		; E = '0', D = 0
	ld	bc,-10000
	call	Num1
	ld	bc,-1000
	call	Num1
	ld	bc,-100
	call	Num1
	ld	c,-10
	call	Num1
	ld	c,-1
	call	Num1
	ld	a,d		; digit count
	or	a
	jr	nz,itdone	; only ones digit
	inc	ix
	inc	a
itdone:
	push	ix
	pop	de
	ret 

Num1:	ld	a,'0'-1		; starting point is negative
Num2:	inc	a
	add	hl,bc
	jr	c,Num2
	sbc	hl,bc		; restore for overshoot

putd:	ld	(ix+0),a	; store digit. 
	or	e		; this accumulates bits
	ld	e,a
	sub	'1'		; any of them > '0' carry if no
	ret	c		; nothing output, leading zero.
	inc	d		; digit count
	inc	ix		; pointer
	ret


aok:    db      CR,LF,'OK',CR,LF,0

;
; return z if return buffer contains an OK
;
ckok:   ld      hl,retbuf
        ld      de,aok
        jp      ismatch

;
; mild hack alert:  we use the scatter/gather stuff to get around the
; mechanism of wrtread not having 16 bit segment lengths.
; so, if we want to write 256 bytes and get 266 bytes back,
; we'll need 4 segments, 2 for write of 255, 1 and 2 for read of 255,10.

;
; given a buffer address in HL, length in BC, and pointer in IX
; build a descriptor array.
; trashes IX, BC, HL, A
;
blddesc:
	ld	(ix+0),c
	ld	(ix+1),l
	ld	(ix+2),h
	ld	(ix+3),0
	ld	a,b		; 256 is too big for one segment
	or	a
	ret	z

	ld	(ix+0),255	; max segment size
	inc	h		; HL += 255 (HL += 256 ; HL -= 1)
	dec	hl
	inc	bc		; BC -= 255 (BC -= 256 ; BC += 1)
	dec	b
	inc	ix		; IX += 3
	inc	ix
	inc	ix
	jr	blddesc

wdesc:
	db      0		; write segment 0
	dw      0
	db      0		; write segment 1
	dw      0
        db      0		; terminator

rdesc:	db	0		; read segment 0
	dw	0
	db	0		; read segment 1
	dw	0
	db	0		; terminator

atlead:	db	'AT command: ',0
crlfb:	db	CR,LF,0
atretm:	db	'AT response: ',0

;
; send null-terminated command in HL
; expecting DE bytes back in retbuf
;
atcmd:	
	spew	'A'
	push	hl
	push	de
	ex	de,hl
	call	strlen
	ld	b,h
	ld	c,l
	pop	de
	pop	hl		; fall through
;
; atcmd: run an AT command
;	cmd ptr in HL
; 	cmd length in BC
; 	expected response length in DE
;
atcmdl:
	spew	'a'
	ld	ix,wdesc
	call	blddesc
	ld	ix,rdesc
	ld	hl,retbuf
	ld	b,d
	ld	c,e
	call	blddesc

doat:	ld	hl,wdesc
	ld	de,rdesc
        call    wrtread

        ret
;
; hex dump a string in HL
;
hexdmps:
	push	hl
	push	de
	push	bc
	push	hl
	ex	de,hl
	call	strlen
	inc	l
	ld	c,l
	pop	hl
	call	hexdump
	pop	bc
	pop	de
	pop	hl
	ret
;
; dump a buffer in hex with ascii
; buffer in HL, count in C
;
abuf:   ds      16
        db      CR,LF,00h

hexdump:

nextl:  ld      de,abuf         ; a new line
        ld      b,16

doline: call    hex4
        ld      a,':'
        call    outch
        ld      a,SPACE
        call    outch

nb:    	ld	a,16
	sub	b
	cp	c
	jr	c,getit

	ld	a,SPACE
	call	outch
	ld	a,SPACE
	call	outch
	ld	a,SPACE
	call	outch
	ld	a,SPACE
	jr	pb
 
getit:	ld      a,(hl)          ; hex digits
        call    hex2
        ld      a,SPACE
        call    outch
        ld      a,(hl)
        inc     hl
        cp      020h
        jr      c,bad
        cp      07fh
        jr      c,pb
bad:    ld      a,'.'
pb:     ld      (de),a
        inc     de
        ld      a,b
        and     3
        cp      1
        jr      nz,no4
        ld      a,SPACE
        call    outch
no4:    djnz    nb
        ld      de,abuf
        call    outstr
        ld	a,c
	sub	16
	ld	c,a
	ret	c
        jr      nz,nextl
        ret

;
; output hex address in HL
;
hex4:   ld      a,h
        call    hex2
        ld      a,l
        ; fall through
;
; output hex digit in A
; destroys A
;
hex2:   push    af
        rrc     a
        rrc     a
        rrc     a
        rrc     a
        call    nib
        pop     af
nib:    and     0fh
        add     '0'
        cp      '9'+1
        jr      c,notlet
        add     7
notlet: call    outch
        ret

;
; send character in A to console
; preserves HL, DE, BC
;
outch:  push    hl
        push    de
        push    bc
        ld      bc,0100h
        ld      e,a
        rst	8
        pop     bc
        pop     de
        pop     hl
        ret
;
; print a character, followed by crlf
;
cr1:    call    dprint
newline:
        ld      a,cr
        call    dprint
        ld      a,lf
        call    dprint
        ret
;
; send null terminated string in DE
;
outstr: ld      a,(de)
        or      a
        ret     z
        call    outch
        inc     de
        jr      outstr

s_bc:	dw	0
s_de:	dw	0
s_hl:	dw	0
s_bc2:	dw	0
s_de2:	dw	0
s_hl2:	dw	0
s_a2:	db	0

dprint:
	ld	(s_bc),bc
	ld	(s_de),de
	ld	(s_hl),hl
	exx
	ld	(s_bc2),bc
	ld	(s_de2),de
	ld	(s_hl2),hl
        ld      bc,0100h
        ld      e,a
        rst	8
	ld	bc,(s_bc2)
	ld	de,(s_de2)
	ld	hl,(s_hl2)
	exx
	ld	bc,(s_bc)
	ld	de,(s_de)
	ld	hl,(s_hl)
        ret

        db      '-atlib end-',0

	end

